-
  name: check primary
  community.mongodb.mongodb_shell:
    login_port: "{{ shard_port }}"
    login_user: "{{ admin_user }}"
    login_password: "{{ admin_password }}"
    db: admin
    eval: "rs.isMaster()"
    transform: raw
  register: primary_check
  changed_when: False
-
  name: create privilege role
  when: "'\"ismaster\" : true' in primary_check.transformed_output"
  ignore_errors: true
  community.mongodb.mongodb_shell:
    login_port: "{{ shard_port }}"
    login_user: "{{ admin_user }}"
    login_password: "{{ admin_password }}"
    db: admin
    eval:
      "db.getSiblingDB('admin').createRole({ 'role': 'pbmAnyAction',
              'privileges': [
                { 'resource': { 'anyResource': true },
                  'actions': [ 'anyAction' ]
                }
              ],
              'roles': []
          })"
  register: create_role_result
  failed_when:
    - '"skipped" not in create_role_result'
    - '"already exists" not in create_role_result.msg'
    - '"\"changed\": true" not in create_role_result.msg'
  changed_when:
    - '"\"changed\": true" in create_role_result.msg'
-
  name: add a user for pbm - pbmuser
  when: "'\"ismaster\" : true' in primary_check.transformed_output"
  community.mongodb.mongodb_user:
    login_port: "{{ shard_port }}"
    login_user: "{{ admin_user }}"
    login_password: "{{ admin_password }}"
    database: admin
    user: pbmuser
    password: "{{ pbmuser_password }}"
    state: present
    roles:
      - db: admin
        role: readWrite
      - db: admin
        role: backup
      - db: admin
        role: clusterMonitor
      - db: admin
        role: restore
      - db: admin
        role: pbmAnyAction
  register: add_user_result
  changed_when: False